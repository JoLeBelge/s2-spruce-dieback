# librairie pour effectuer des requêtes sur un webserver
require(curl)
# librairie pour la lecture de shapefile
library(sf)
server.api <- "http://forestimator.gembloux.ulg.ac.be/api/"
shp.path <- "/home/jo/Documents/carteApt/autres/shpTest/epioux_sample.shp"
parcellaire.shp <- st_read(shp.path)
polNum <- 1
cat(paste0("traitement du polygone numéro ", polNum,"\n"))
wkt.pt <- st_as_text( st_centroid(parcellaire.shp$geometry[polNum])
#cat(paste0("wkt polygone : \n ", wkt.pol,"\n"))
my.request <- paste0(server.api,"dendro2018/polygon/",wkt.pol)
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(rawToChar(req.res$content))
cat("\n")
}
wkt.pt <- st_as_text( st_centroid(parcellaire.shp$geometry[polNum]))
wkt.pt
layer<-"ZBIO"
my.request <- paste0(server.api,layer,"/point/",wkt.pt)
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(rawToChar(req.res$content))
cat("\n")
wkt.pt
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
my.request
server.api <- "http://http://localhost:8085/api/"
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
my.request
server.api <- "http://localhost:8085/api/"
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(rawToChar(req.res$content))
cat("\n")
for (layer in c("ZBIO", "MNT", "SS","TOPO")){
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(paste0("couche ", layer " :"))
cat(rawToChar(req.res$content))
cat("\n")
}
for (layer in c("ZBIO", "MNT", "SS","TOPO")){
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(paste0("couche ", layer " :"))
cat(rawToChar(req.res$content))
cat("\n")
}
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(paste0("couche ", layer " :"))
for (layer in c("ZBIO", "MNT", "SS","TOPO")){
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(paste0("couche ", layer, " :"))
cat(rawToChar(req.res$content))
cat("\n")
}
layer <- "Topo"
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(paste0("couche ", layer, " :"))
cat(rawToChar(req.res$content))
cat("\n")
for (layer in c("ZBIO", "MNT", "SS","Topo")){
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(paste0("couche ", layer, " : "))
cat(rawToChar(req.res$content))
cat("\n")
}
#server.api <- "http://localhost:8085/api/"
server.api <- "http://forestimator.gembloux.ulg.ac.be/api/"
shp.path <- "/home/jo/Documents/carteApt/autres/shpTest/epioux_sample.shp"
parcellaire.shp <- st_read(shp.path)
# attention, la méthode fonctionne pour des POLYGONES et des MULTIPOLYGONES dont la géométrie est valide. Si géométrie pas valide, je ne garanti pas l'exactitude du résultat.
# boucle sur les polygones du shapefile
for (polNum in 1:nrow(parcellaire.shp)){
cat(paste0("traitement du polygone numéro ", polNum,"\n"))
wkt.pt <- st_as_text( st_centroid(parcellaire.shp$geometry[polNum]))
#cat(paste0("wkt polygone : \n ", wkt.pol,"\n"))
#zone bioclimatique, altitude, sous-secteur radiatif, et situation topographique pour chaque centroïde
for (layer in c("ZBIO", "MNT", "SS","Topo")){
my.request <- paste0(server.api,layer,"/args/txt/point/",wkt.pt) # args/txt c'est pour avoir la réponse sous forme de texte plutôt que la valeur du pixel (nombre entier) par défaut - à toi de voir..
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
# on écrit dans la console (ou ailleurs) la réponse du serveur
cat(paste0("couche ", layer, " : "))
cat(rawToChar(req.res$content))
cat("\n")
}
cat("\n\n")
}
install.packages(“httr”)
install.packages("httr")
798-355
826-238
# librairie pour effectuer des requêtes sur un webserver
require(curl)
# librairie pour la lecture de shapefile
library(sf)
# librairie pour la lecture de shapefile
library(sf)
server.api <- "http://forestimator.gembloux.ulg.ac.be/api/"
server.api <- "http://forestimator.gembloux.ulg.ac.be/api/"
shp.path <- "/home/jo/Documents/carteApt/autres/shpTest/epioux_sample.shp"
parcellaire.shp <- st_read(shp.path)
plot(parcellaire.shp)
str(parcellaire.shp)
parcellaire.shp$OBJECTID
str(parcellaire.shp$OBJECTID)
polNum <- 1
cat(paste0("traitement du polygone numéro ", polNum,"\n"))
cat(paste("toto", "tata"))
cat(paste("toto", "tata", sep="///"))
cat(paste("toto", "tata", polNum, sep="///"))
str(parcellaire.shp$geometry)
str(parcellaire.shp$geometry)[2]
parcellaire.shp$geometry[2]
parcellaire.shp$geometry[polNum]
parcellaire.shp$geometry[2]
st_as_text(parcellaire.shp$geometry[polNum])
wkt.pol <- st_as_text(parcellaire.shp$geometry[polNum])
wkt.pol
#cat(paste0("wkt polygone : \n ", wkt.pol,"\n"))
my.request <- paste0(server.api,"dendro2018/polygon/",wkt.pol)
my.request
# remplacement des espaces par le symbole consacré
my.request <- gsub(" ", "%20", my.request, fixed = TRUE)
my.request
# on effectue la requete auprès du serveur - résultat sauvé en mémoire sous forme hexadécimale (=raw)
req.res <- curl_fetch_memory(my.request)
req.res
# on écrit dans la console (ou ailleurs) la réponse du serveur
response.txt <- rawToChar(req.res$content)
response.txt
require(DescTools)
TextToTable(response.txt)
TextToTable(response.txt, sep=";")
TextToTable(response.txt, sep=";", header=T)
t <- TextToTable(response.txt, sep=";", header=T)
t
1:nrow(parcellaire.shp)
#package
require(ggplot2)
require(ggrepel)
setwd("/home/jo/app/s2/articleSco/images/climat")
d <- read.table("growing_seasing_r_t_30.csv", sep=";")
#graphe
p <-ggplot(d, aes(P,Tmean, shape= y))+
geom_point(aes(colour= region), size=2)+
scale_color_manual(values=c("red","blue"))+
geom_text_repel(aes(label = loca_str),
size = 3.5)+
#ggtitle("Moyenne sur la période de végétation")+
xlab("Average precipitation during the growing season (mm)") + ylab("Average temperature during the growing season (°C)")+
theme(
# Masquer les bords des panneaux et supprimer les lignes de grilles
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Modifier le trait des axes
axis.line = element_line(colour = "black")
)+
theme_classic()
p
plot(p)
#graphe
p <-ggplot(d, aes(P,Tmean, shape= y))+
geom_point(aes(colour= region), size=2)+
scale_color_manual(values=c("red","blue"))+
geom_text_repel(aes(label = loca_str),
size = 3.5)+
#ggtitle("Moyenne sur la période de végétation")+
xlab("Average precipitation during the growing season (mm)") + ylab("Average temperature during the growing season (°C)")+
theme(
# Masquer les bords des panneaux et supprimer les lignes de grilles
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Modifier le trait des axes
axis.line = element_line(colour = "black")
)+
theme_classic()
plot(p)
#graphe
pl <-ggplot(d, aes(P,Tmean, shape= y))+
geom_point(aes(colour= region), size=2)+
scale_color_manual(values=c("red","blue"))+
geom_text_repel(aes(label = loca_str),
size = 3.5)+
#ggtitle("Moyenne sur la période de végétation")+
xlab("Average precipitation during the growing season (mm)") + ylab("Average temperature during the growing season (°C)")+
theme(
# Masquer les bords des panneaux et supprimer les lignes de grilles
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Modifier le trait des axes
axis.line = element_line(colour = "black")
)+
theme_classic()
pl
d
d <- read.table("growing_seasing_r_t_30.csv", sep=";", header=T)
#graphe
pl <-ggplot(d, aes(P,Tmean, shape= y))+
geom_point(aes(colour= region), size=2)+
scale_color_manual(values=c("red","blue"))+
geom_text_repel(aes(label = loca_str),
size = 3.5)+
#ggtitle("Moyenne sur la période de végétation")+
xlab("Average precipitation during the growing season (mm)") + ylab("Average temperature during the growing season (°C)")+
theme(
# Masquer les bords des panneaux et supprimer les lignes de grilles
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Modifier le trait des axes
axis.line = element_line(colour = "black")
)+
theme_classic()
pl
d$y
#graphe
pl <-ggplot(d, aes(P,Tmean, shape=as.factor(y)))+
geom_point(aes(colour= region), size=2)+
scale_color_manual(values=c("red","blue"))+
geom_text_repel(aes(label = loca_str),
size = 3.5)+
#ggtitle("Moyenne sur la période de végétation")+
xlab("Average precipitation during the growing season (mm)") + ylab("Average temperature during the growing season (°C)")+
theme(
# Masquer les bords des panneaux et supprimer les lignes de grilles
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Modifier le trait des axes
axis.line = element_line(colour = "black")
)+
theme_classic()
pl
d$P
d <- read.table("growing_seasing_r_t_30.csv", sep=";", header=T)
#graphe
pl <-ggplot(d, aes(P,Tmean, shape=as.factor(y)))+
geom_point(aes(colour= region), size=2)+
scale_color_manual(values=c("red","blue"))+
geom_text_repel(aes(label = loca_str),
size = 3.5)+
#ggtitle("Moyenne sur la période de végétation")+
xlab("Average precipitation during the growing season (mm)") + ylab("Average temperature during the growing season (°C)")+
theme(
# Masquer les bords des panneaux et supprimer les lignes de grilles
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Modifier le trait des axes
axis.line = element_line(colour = "black")
)+
theme_classic()
pl
View(d)
View(d)
plot(d$P,d$Tmean, xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)")
plot(d$P,d$Tmean, xlim=c(250,600),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)")
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)")
pStyle <- rep(17,nrow(d))
pStyle
d$region
d$region=="Wallonie"
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle)
pStyle <- rep(17,nrow(d))
pStyle[d$region=="Wallonie"]<-16
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle)
pStyle[d$region=="Wallonie"]<-1
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle,
bty=F)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle,
bty="n")
d$num <- 1:nrow(d)
d$num
text(d$P,d$Tmean,d$num)
text(d$P,d$Tmean+0.3,d$num)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle,
bty="n", )
text(d$P,d$Tmean+0.15,d$num)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle,
bty="n", )
text(d$P,d$Tmean+0.1,d$num)
text(d$P,d$Tmean+0.12,d$num)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle,
bty="n", )
text(d$P,d$Tmean+0.12,d$num)
xtable(d[,c("num","locaEN")])
require(xtable)
install.packages("xtable")
require(xtable)
xtable(d[,c("num","locaEN")])
d <- read.table("growing_seasing_r_t_30.csv", sep=";", header=T)
d$num <- 1:nrow(d)
xtable(d[,c("num","locaEN")])
d$locaEN
View(d)
View(d)
d <- read.table("growing_seasing_r_t_30.csv", sep=";", header=T)
d$num <- 1:nrow(d)
xtable(d[,c("num","locaEN")])
View(d)
d <- read.table("growing_seasing_r_t_30.csv", sep=";", header=T)
d$num <- 1:nrow(d)
xtable(d[,c("num","locaEN")])
xtable(d[,c("num","region","locaEN")])
View(d)
d <- read.table("growing_seasing_r_t_30.csv", sep=";", header=T)
d <- read.table("growing_seasing_r_t_30.csv", sep=";", header=T)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle,
bty="n", )
text(d$P,d$Tmean+0.12,d$num)
xtable(d[,c("num","region","locaEN")])
d[order(d$num)]
d[order(d$num),]
d <- d[order(d$num),]
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle,
bty="n", )
text(d$P,d$Tmean+0.12,d$num)
xtable(d[,c("num","locaEN")])
xtable(d[,c("num","locaEN")], row.name=F)
d[,c("num","locaEN")]
xtable(d[,c("num","locaEN")], include.rownames=FALSE)
print(xtable(d[,c("num","locaEN")]), include.rownames=FALSE)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18),xlab="Average precipitation during the growing season (mm)", ylab="Average temperature during the growing season (°C)", pch=pStyle,
bty="n",cex.axis=2 )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.2, cex=2)
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=2)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=2)
mtext("Average temperature during the growing season (°C)", side=2, line=2.9, cex=2)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=2)
mtext("Average temperature during the growing season (°C)", side=2, line=2, cex=2)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1.8)
mtext("Average temperature during the growing season (°C)", side=2, line=2, cex=1.8)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1.3)
mtext("Average temperature during the growing season (°C)", side=2, line=2, cex=1.3)
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1.3)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1.3)
text(d$P,d$Tmean+0.12,d$num)
pdf("climat.pdf",width=9,height=9,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1.3)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1.3)
text(d$P,d$Tmean+0.12,d$num)
dev.off()
pdf("climat.pdf",width=7,height=7,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1.3)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1.3)
text(d$P,d$Tmean+0.12,d$num)
dev.off()
pdf("climat.pdf",width=5,height=6,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1.3)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1.3)
text(d$P,d$Tmean+0.12,d$num)
dev.off()
pdf("climat.pdf",width=5,height=6,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1)
text(d$P,d$Tmean+0.12,d$num, cex=0.8)
dev.off()
pStyle[d$region=="Wallonie"]<-18
pdf("climat.pdf",width=5,height=6,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1)
text(d$P,d$Tmean+0.12,d$num, cex=0.8)
dev.off()
pdf("climat.pdf",width=5,height=6,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1)
text(d$P,d$Tmean+0.12,d$num, cex=0.7)
dev.off()
pStyle <- rep(17,nrow(d))
pStyle[d$region=="Wallonie"]<-18
pdf("climat.pdf",width=5,height=6,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1)
text(d$P,d$Tmean+0.12,d$num, cex=0.7)
dev.off()
pStyle <- rep(16,nrow(d))
pStyle[d$region=="Wallonie"]<-18
pdf("climat.pdf",width=5,height=6,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(13,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1)
text(d$P,d$Tmean+0.12,d$num, cex=0.7)
dev.off()
d[,c("num","locaEN")]
pdf("climat.pdf",width=5,height=6,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(14,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1)
text(d$P,d$Tmean+0.12,d$num, cex=0.7)
dev.off()
#package
require(ggplot2)
require(ggrepel)
#graphe
pl <-ggplot(d, aes(P,Tmean, shape=as.factor(y)))+
geom_point(aes(colour= region), size=2)+
scale_color_manual(values=c("red","blue"))+
geom_text_repel(aes(label = loca_str),
size = 3.5)+
#ggtitle("Moyenne sur la période de végétation")+
xlab("Average precipitation during the growing season (mm)") + ylab("Average temperature during the growing season (°C)")+
theme(
# Masquer les bords des panneaux et supprimer les lignes de grilles
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Modifier le trait des axes
axis.line = element_line(colour = "black")
)+
theme_classic()
setwd("C:/Users/Arthur Gilles/OneDrive - Universite de Liege/Documents/GitHub/s2-spruce-dieback/articleSco/images/climat")
d <- read.table("growing_seasing_r_t_30.csv", sep=";", header=T)
d <- d[order(d$num),]
pStyle <- rep(16,nrow(d))
pStyle[d$region=="Wallonie"]<-4
pdf("climat.pdf",width=5,height=6,colormodel='cmyk')
plot(d$P,d$Tmean, xlim=c(270,580),ylim=c(14,18), pch=pStyle,
bty="n",xlab="",ylab="" )
mtext("Average precipitation during the growing season (mm)", side=1, line=2.9, cex=1)
mtext("Average temperature during the growing season (°C)", side=2, line=2.4, cex=1)
text(d$P,d$Tmean+0.12,d$num, cex=0.7)
dev.off()
